From zxombie at berlios.de  Tue Dec 13 09:49:22 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Tue, 13 Dec 2005 09:49:22 +0100
Subject: [Libpkg-svn] r31 - trunk/src
Message-ID: <200512130849.jBD8nMQs030811@sheep.berlios.de>

Author: zxombie
Date: 2005-12-13 09:48:27 +0100 (Tue, 13 Dec 2005)
New Revision: 31

Modified:
   trunk/src/pkg.h
   trunk/src/pkg_freebsd.c
   trunk/src/pkg_freebsd.h
   trunk/src/pkg_freebsd_contents.c
   trunk/src/pkg_freebsd_private.h
Log:
Add pkg_new_freebsd_empty to create an empty package to add files to.
Implement the pkg_add_file callback for empty FreeBSD packages.
Add pkg_freebsd_contents_add_line to add a line to a +CONTENTS file
Add pkg_freebsd_contents_add_file to add file data to a +CONTENTS file
Modify pkg_freebsd_contents_new to allow the creation of empty files
Improve the use of white space


Modified: trunk/src/pkg.h
===================================================================
--- trunk/src/pkg.h	2005-11-28 10:29:40 UTC (rev 30)
+++ trunk/src/pkg.h	2005-12-13 08:48:27 UTC (rev 31)
@@ -54,6 +54,7 @@
 struct pkg		*pkg_new_empty(const char *);
 struct pkg		*pkg_new_freebsd_from_file(FILE *);
 struct pkg		*pkg_new_freebsd_installed(const char *, const char *);
+struct pkg		*pkg_new_freebsd_empty(const char *);
 struct pkg		*pkg_make_freebsd(struct pkg *, FILE *);
 int			 pkg_add_file(struct pkg *, struct pkg_file *);
 struct pkg		**pkg_get_dependencies(struct pkg *);

Modified: trunk/src/pkg_freebsd.c
===================================================================
--- trunk/src/pkg_freebsd.c	2005-11-28 10:29:40 UTC (rev 30)
+++ trunk/src/pkg_freebsd.c	2005-12-13 08:48:27 UTC (rev 31)
@@ -52,13 +52,18 @@
 	/* If not null contains the next file in
 	 * the archive after the control files */
 	struct pkg_file	*next;
+
+	struct pkg_file **all_files;
+	unsigned int	  all_files_size;
+	unsigned int	  all_files_pos;
 };
 
 /* Callbacks */
+static int			  freebsd_add_file(struct pkg *, struct pkg_file *);
 static struct pkg_file		**freebsd_get_control_files(struct pkg *);
-static struct pkg_file		*freebsd_get_next_file(struct pkg *);
+static struct pkg_file		 *freebsd_get_next_file(struct pkg *);
 static struct pkg		**freebsd_get_deps(struct pkg *);
-static int			 freebsd_free(struct pkg *);
+static int			  freebsd_free(struct pkg *);
 
 /* Internal functions */
 static struct freebsd_package	*freebsd_get_package(FILE *,
@@ -173,8 +178,43 @@
 	return pkg;
 }
 
-/* XXX Make this a callback */
 struct pkg *
+pkg_new_freebsd_empty(const char *pkg_name)
+{
+	struct pkg *pkg;
+	struct freebsd_package *f_pkg;
+
+	if (pkg_name == NULL)
+		return NULL;
+
+	pkg = pkg_new(pkg_name, freebsd_add_file, NULL, NULL, NULL, freebsd_free);
+	if (pkg == NULL)
+		return NULL;
+
+	f_pkg = freebsd_get_package(NULL, NULL);
+	pkg->data = f_pkg;
+	if (f_pkg == NULL) {
+		pkg_free(pkg);
+		return NULL;
+	}
+	f_pkg->all_files_size = sizeof(struct pkg_file *);
+	f_pkg->all_files_pos = 0;
+	f_pkg->all_files = malloc(f_pkg->all_files_size);
+	if (f_pkg->all_files == NULL) {
+		pkg_free(pkg);
+		return NULL;
+	}
+	f_pkg->all_files[0] = NULL;
+
+	/* Setup the +CONTENTS file */
+	pkg_freebsd_contents_add_line(f_pkg->contents, PKG_LINE_COMMENT,
+	    "PKG_FORMAT_REVISION:1.1");
+	pkg_freebsd_contents_add_line(f_pkg->contents, PKG_LINE_NAME, pkg_name);
+
+	return pkg;
+}
+
+struct pkg *
 pkg_make_freebsd(struct pkg *pkg, FILE *fd)
 {
 	struct freebsd_package *f_pkg;
@@ -183,6 +223,7 @@
 	    freebsd_get_next_file, freebsd_get_deps, freebsd_free);
 	f_pkg = freebsd_get_package(fd, NULL);
 	pkg->data = f_pkg;
+
 	return pkg;
 }
 
@@ -205,6 +246,9 @@
 	/* Init the struct */
 	f_pkg->archive = NULL;
 	f_pkg->next = NULL;
+	f_pkg->all_files = NULL;
+	f_pkg->all_files_size = 0;
+	f_pkg->all_files_pos = 0;
 	f_pkg->control = control;
 	f_pkg->contents = NULL;
 	f_pkg->fd = fd;
@@ -289,17 +333,37 @@
 				f_pkg->control[control_pos] = NULL;
 			}
 		}
-	} else {
-		/*
-		 *Either fd points to an archive or
-		 * contents points to a +CONTENTS file
-		 */
-		assert(0);
 	}
 
 	return f_pkg;
 }
 
+static int
+freebsd_add_file(struct pkg *pkg, struct pkg_file *file)
+{
+	struct freebsd_package *f_pkg;
+
+	assert(pkg != NULL);
+	assert(file != NULL);
+	assert(pkg->data != NULL);
+
+	f_pkg = pkg->data;
+
+	assert(f_pkg->all_files != NULL);
+
+	f_pkg->all_files_size += sizeof(struct pkg_file *);
+	f_pkg->all_files = realloc(f_pkg->all_files, f_pkg->all_files_size);
+	f_pkg->all_files[f_pkg->all_files_pos] = file;
+	f_pkg->all_files_pos++;
+	f_pkg->all_files[f_pkg->all_files_pos] = NULL;
+
+	/* XXX Add the file to the +CONTENTS file */
+	assert(f_pkg->contents != NULL);
+	pkg_freebsd_contents_add_file(f_pkg->contents, file);
+	
+	return 0;
+}
+
 /* Return the array of control files */
 static struct pkg_file **
 freebsd_get_control_files(struct pkg *pkg)
@@ -482,7 +546,7 @@
 	f_pkg->fd = NULL;
 
 	if (f_pkg->control) {
-		for (pos=0; f_pkg->control[pos] != NULL; pos++)
+		for (pos = 0; f_pkg->control[pos] != NULL; pos++)
 			pkg_file_free(f_pkg->control[pos]);
 		free(f_pkg->control);
 		f_pkg->control = NULL;
@@ -492,6 +556,13 @@
 		pkg_file_free(f_pkg->next);
 	pkg_freebsd_contents_free(f_pkg->contents);
 
+	if (f_pkg->all_files) {
+		for (pos = 0; f_pkg->all_files[pos] != NULL; pos++)
+			pkg_file_free(f_pkg->all_files[pos]);
+
+		free(f_pkg->all_files);
+	}
+	
 	free(f_pkg);
 
 	return 0;

Modified: trunk/src/pkg_freebsd.h
===================================================================
--- trunk/src/pkg_freebsd.h	2005-11-28 10:29:40 UTC (rev 30)
+++ trunk/src/pkg_freebsd.h	2005-12-13 08:48:27 UTC (rev 31)
@@ -47,7 +47,13 @@
 	PKG_LINE_FILE = 11
 };
 
+extern const char *pkg_freebsd_contents_line_str[];
+
 struct pkg_freebsd_contents *pkg_freebsd_contents_new(const char *);
+int pkg_freebsd_contents_add_line(struct pkg_freebsd_contents *, int,
+				const char *);
+int pkg_freebsd_contents_add_file(struct pkg_freebsd_contents *,
+				struct pkg_file *);
 int pkg_freebsd_contents_free(struct pkg_freebsd_contents *);
 
 #endif /* __LIBPKG_PKG_FREEBSD_H__ */

Modified: trunk/src/pkg_freebsd_contents.c
===================================================================
--- trunk/src/pkg_freebsd_contents.c	2005-11-28 10:29:40 UTC (rev 30)
+++ trunk/src/pkg_freebsd_contents.c	2005-12-13 08:48:27 UTC (rev 31)
@@ -28,8 +28,10 @@
  */
 
 #include <sys/param.h>
+#include <sys/types.h>
 
 #include <assert.h>
+#include <md5.h>
 #include <stdlib.h>
 #include <string.h>
 
@@ -38,118 +40,203 @@
 #include "pkg_private.h"
 #include "pkg_freebsd_private.h"
 
+const char *pkg_freebsd_contents_line_str[] = {
+	"",
+	"@comment",
+	"@name",
+	"@cwd",
+	"@pkgdep",
+	"@conflicts",
+	"@exec",
+	"@unexec",
+	"@ignore",
+	"@dirrm",
+	"@mtree",
+	NULL
+};
+
 struct pkg_freebsd_contents *
 pkg_freebsd_contents_new(const char *contents)
 {
 	struct pkg_freebsd_contents *cont;
 	int pos;
 
-	if (contents == NULL)
-		return NULL;
-
 	cont = malloc(sizeof(struct pkg_freebsd_contents));
-	if (!cont) {
+	if (!cont)
 		return NULL;
-	}
 
-	cont->file = strdup(contents);
-	if (!cont->file) {
-		free(cont);
-		return NULL;
-	}
-	cont->lines = NULL;
+	if (contents == NULL) {
+		cont->file = NULL;
+		cont->line_count = 0;
+		cont->line_size = 0;
+		cont->lines = NULL;
+	} else {
+		cont->file = strdup(contents);
+		if (!cont->file) {
+			free(cont);
+			return NULL;
+		}
+		cont->lines = NULL;
 
-	pos = 0;
-	cont->line_count = 0;
-	while (cont->file[pos] != '\0') {
-		if (cont->file[pos] == '\n')
+		pos = 0;
+		cont->line_count = 0;
+		while (cont->file[pos] != '\0') {
+			if (cont->file[pos] == '\n')
+				cont->line_count++;
+			pos++;
+		}
+		/* Check the last line contains data */
+		if (pos > 0 && cont->file[pos-1] != '\n')
 			cont->line_count++;
-		pos++;
+
+		if (cont->line_count == 0) {
+			pkg_freebsd_contents_free(cont);
+			return NULL;
+		}
+		cont->lines = malloc(sizeof(struct pkg_freebsd_contents_line) *
+		    cont->line_count);
+		if (!cont->lines) {
+			pkg_freebsd_contents_free(cont);
+			return NULL;
+		}
+
+		/*
+		 * Make each line in cont->lines point to the start of it's line
+		 * and be a valid string
+		 */
+		cont->lines[0].line = cont->file;
+		pos = 1;
+		while (pos < cont->line_count) {
+			cont->lines[pos].line = strchr(cont->lines[pos-1].line, '\n');
+			if (cont->lines[pos].line) {
+				/* Terminate the last line */
+				cont->lines[pos].line[0] = '\0';
+				cont->lines[pos].line++;
+			} else
+				break;
+			pos++;
+		}
+		/* The last line may need to be terminated at the correct place */
+		pos = strlen(cont->lines[cont->line_count-1].line);
+		if (cont->lines[cont->line_count-1].line[--pos] == '\n') {
+			cont->lines[cont->line_count-1].line[pos] = '\0';
+		}
+
+		/*
+	         * Set the data part of the line. ie not the control word 
+	         * Set the line_type
+	         */
+		pos = 0;
+		while (pos < cont->line_count) {
+			char *space;
+
+			space = strchr(cont->lines[pos].line, ' ');
+			if (space && space[0] != '\0') {
+				space[0] = '\0';
+				space++;
+				if (space[0] != '\0')
+					cont->lines[pos].data = space;
+			}
+
+			/* Get the correct line type for the line */
+			if (cont->lines[pos].line[0] != '@') {
+				cont->lines[pos].line_type = PKG_LINE_FILE;
+			} else if (!strcmp(cont->lines[pos].line, "@comment")) {
+				cont->lines[pos].line_type = PKG_LINE_COMMENT;
+			} else if (!strcmp(cont->lines[pos].line, "@name")) {
+				cont->lines[pos].line_type = PKG_LINE_NAME;
+			} else if (!strcmp(cont->lines[pos].line, "@cwd")) {
+				cont->lines[pos].line_type = PKG_LINE_CWD;
+			} else if (!strcmp(cont->lines[pos].line, "@pkgdep")) {
+				cont->lines[pos].line_type = PKG_LINE_PKGDEP;
+			} else if (!strcmp(cont->lines[pos].line, "@conflicts")) {
+				cont->lines[pos].line_type = PKG_LINE_CONFLICTS;
+			} else if (!strcmp(cont->lines[pos].line, "@exec")) {
+				cont->lines[pos].line_type = PKG_LINE_EXEC;
+			} else if (!strcmp(cont->lines[pos].line, "@unexec")) {
+				cont->lines[pos].line_type = PKG_LINE_UNEXEC;
+			} else if (!strcmp(cont->lines[pos].line, "@ignore")) {
+				cont->lines[pos].line_type = PKG_LINE_IGNORE;
+			} else if (!strcmp(cont->lines[pos].line, "@dirrm")) {
+				cont->lines[pos].line_type = PKG_LINE_DIRRM;
+			} else if (!strcmp(cont->lines[pos].line, "@mtree")) {
+				cont->lines[pos].line_type = PKG_LINE_MTREE;
+			} else {
+				cont->lines[pos].line_type = PKG_LINE_UNKNOWN;
+				fprintf(stderr, "Unknown line type %s\n", cont->lines[pos].line);
+			}
+			pos++;
+		}
 	}
-	/* Check the last line contains data */
-	if (pos > 0 && cont->file[pos-1] != '\n')
-		cont->line_count++;
+	return cont;
+}
 
-	if (cont->line_count == 0) {
-		pkg_freebsd_contents_free(cont);
-		return NULL;
+int
+pkg_freebsd_contents_add_line(struct pkg_freebsd_contents *contents, int type,
+	const char *data)
+{
+	if (!contents || !data)
+		return -1;
+
+	if (!(type > 0 && type <= PKG_LINE_FILE)) {
+		return -1;
 	}
-	cont->lines = malloc(sizeof(struct pkg_freebsd_contents_line) *
-	    cont->line_count);
-	if (!cont->lines) {
-		pkg_freebsd_contents_free(cont);
-		return NULL;
-	}
 
+	/* Add the lines to the +CONTENTS file */
+	contents->line_size += sizeof(struct pkg_freebsd_contents_line);
+	if (contents->lines == NULL)
+		contents->lines = malloc(contents->line_size);
+	else
+		contents->lines = realloc(contents->lines, contents->line_size);
+
+	/* Init the values */
+	contents->lines[contents->line_count].data = NULL;
+	contents->lines[contents->line_count].line = NULL;
+	contents->lines[contents->line_count].line_type = type;
+
 	/*
-	 * Make each line in cont->lines point to the start of it's line
-	 * and be a valid string
+	 * If the line is a file then the line will be the filename,
+	 * the data will be NULL
 	 */
-	cont->lines[0].line = cont->file;
-	pos = 1;
-	while (pos < cont->line_count) {
-		cont->lines[pos].line = strchr(cont->lines[pos-1].line, '\n');
-		if (cont->lines[pos].line) {
-			/* Terminate the last line */
-			cont->lines[pos].line[0] = '\0';
-			cont->lines[pos].line++;
-		} else
-			break;
-		pos++;
+	if (type == PKG_LINE_FILE) {
+		contents->lines[contents->line_count].line = strdup(data);
+		assert(contents->lines[contents->line_count].line != NULL);
+	} else {
+		contents->lines[contents->line_count].line =
+		    strdup(pkg_freebsd_contents_line_str[type]);
+		contents->lines[contents->line_count].data = strdup(data);
+		assert(contents->lines[contents->line_count].data != NULL);
 	}
-	/* The last line may need to be terminated at the correct place */
-	pos = strlen(cont->lines[cont->line_count-1].line);
-	if (cont->lines[cont->line_count-1].line[--pos] == '\n') {
-		cont->lines[cont->line_count-1].line[pos] = '\0';
-	}
+	contents->line_count++;
 
-	/*
-         * Set the data part of the line. ie not the control word 
-         * Set the line_type
-         */
-	pos = 0;
-	while (pos < cont->line_count) {
-		char *space;
+	return 0;
+}
 
-		space = strchr(cont->lines[pos].line, ' ');
-		if (space && space[0] != '\0') {
-			space[0] = '\0';
-			space++;
-			if (space[0] != '\0')
-				cont->lines[pos].data = space;
-		}
+/*
+ * Add's a file the the +CONTENTS file
+ */
+int
+pkg_freebsd_contents_add_file(struct pkg_freebsd_contents *contents,
+		struct pkg_file *file)
+{
+	char md5[33], tmp[37];
 
-		/* Get the correct line type for the line */
-		if (cont->lines[pos].line[0] != '@') {
-			cont->lines[pos].line_type = PKG_LINE_FILE;
-		} else if (!strcmp(cont->lines[pos].line, "@comment")) {
-			cont->lines[pos].line_type = PKG_LINE_COMMENT;
-		} else if (!strcmp(cont->lines[pos].line, "@name")) {
-			cont->lines[pos].line_type = PKG_LINE_NAME;
-		} else if (!strcmp(cont->lines[pos].line, "@cwd")) {
-			cont->lines[pos].line_type = PKG_LINE_CWD;
-		} else if (!strcmp(cont->lines[pos].line, "@pkgdep")) {
-			cont->lines[pos].line_type = PKG_LINE_PKGDEP;
-		} else if (!strcmp(cont->lines[pos].line, "@conflicts")) {
-			cont->lines[pos].line_type = PKG_LINE_CONFLICTS;
-		} else if (!strcmp(cont->lines[pos].line, "@exec")) {
-			cont->lines[pos].line_type = PKG_LINE_EXEC;
-		} else if (!strcmp(cont->lines[pos].line, "@unexec")) {
-			cont->lines[pos].line_type = PKG_LINE_UNEXEC;
-		} else if (!strcmp(cont->lines[pos].line, "@ignore")) {
-			cont->lines[pos].line_type = PKG_LINE_IGNORE;
-		} else if (!strcmp(cont->lines[pos].line, "@dirrm")) {
-			cont->lines[pos].line_type = PKG_LINE_DIRRM;
-		} else if (!strcmp(cont->lines[pos].line, "@mtree")) {
-			cont->lines[pos].line_type = PKG_LINE_MTREE;
-		} else {
-			cont->lines[pos].line_type = PKG_LINE_UNKNOWN;
-			fprintf(stderr, "Unknown line type %s\n", cont->lines[pos].line);
-		}
-		pos++;
+	if (contents == NULL || contents->file != NULL || file == NULL)
+		return -1;
+
+	if (pkg_freebsd_contents_add_line(contents, PKG_LINE_FILE,
+	    file->filename) != 0) {
+		return -1;
 	}
 
-	return cont;
+	MD5Data(file->contents, file->len, md5);
+	snprintf(tmp, 37, "MD5:%s", md5);
+	if (pkg_freebsd_contents_add_line(contents, PKG_LINE_COMMENT, tmp)
+	    != 0) {
+		return -1;
+	}
+
+	return 0;
 }
 
 int

Modified: trunk/src/pkg_freebsd_private.h
===================================================================
--- trunk/src/pkg_freebsd_private.h	2005-11-28 10:29:40 UTC (rev 30)
+++ trunk/src/pkg_freebsd_private.h	2005-12-13 08:48:27 UTC (rev 31)
@@ -39,6 +39,7 @@
 struct pkg_freebsd_contents {
 	char	*file;
 	int	 line_count;
+	int	 line_size;
 	struct pkg_freebsd_contents_line *lines;
 };
 



From zxombie at berlios.de  Wed Dec 14 03:42:38 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Wed, 14 Dec 2005 03:42:38 +0100
Subject: [Libpkg-svn] r32 - trunk/src
Message-ID: <200512140242.jBE2gchD004163@sheep.berlios.de>

Author: zxombie
Date: 2005-12-14 03:42:16 +0100 (Wed, 14 Dec 2005)
New Revision: 32

Modified:
   trunk/src/pkg.c
   trunk/src/pkg.h
   trunk/src/pkg_freebsd.c
   trunk/src/pkg_private.h
Log:
Add pkg_add_dependency to add a dependency to a given package package


Modified: trunk/src/pkg.c
===================================================================
--- trunk/src/pkg.c	2005-12-13 08:48:27 UTC (rev 31)
+++ trunk/src/pkg.c	2005-12-14 02:42:16 UTC (rev 32)
@@ -35,6 +35,7 @@
 
 struct pkg *
 pkg_new(const char *name,
+		pkg_add_dependency_callback *add_depend,
 		pkg_add_file_callback *add_file,
 		pkg_get_control_files_callback *control_files,
 		pkg_get_next_file_callback *next_file,
@@ -57,8 +58,8 @@
 		return NULL;
 	}
 
-	pkg_set_callbacks(pkg, add_file, control_files, next_file, get_deps,
-	    free_pkg);
+	pkg_set_callbacks(pkg, add_depend, add_file, control_files, next_file,
+	    get_deps, free_pkg);
 
 	pkg->data = NULL;
 
@@ -68,17 +69,19 @@
 struct pkg*
 pkg_new_empty(const char *name)
 {
-	return pkg_new(name, NULL, NULL, NULL, NULL, NULL);
+	return pkg_new(name, NULL, NULL, NULL, NULL, NULL, NULL);
 }
 
 struct pkg *
 pkg_set_callbacks(struct pkg *pkg,
+		pkg_add_dependency_callback *add_depend,
 		pkg_add_file_callback *add_file,
 		pkg_get_control_files_callback *control_files,
 		pkg_get_next_file_callback *next_file,
 		pkg_get_dependencies_callback *get_deps,
 		pkg_free_callback *free_pkg)
 {
+	pkg->pkg_add_depend = add_depend;
 	pkg->pkg_add_file = add_file;
 	pkg->pkg_get_control_files = control_files;
 	pkg->pkg_get_next_file = next_file;
@@ -89,6 +92,18 @@
 }
 
 int
+pkg_add_dependency(struct pkg *pkg, struct pkg *depend)
+{
+	if (!pkg || !depend)
+		return -1;
+
+	if (pkg->pkg_add_depend)
+		return pkg->pkg_add_depend(pkg, depend);
+
+	return -1;
+}
+
+int
 pkg_add_file(struct pkg *pkg, struct pkg_file *file)
 {
 	if (!pkg || !file)

Modified: trunk/src/pkg.h
===================================================================
--- trunk/src/pkg.h	2005-12-13 08:48:27 UTC (rev 31)
+++ trunk/src/pkg.h	2005-12-14 02:42:16 UTC (rev 32)
@@ -51,12 +51,13 @@
  */
 struct pkg;
 
-struct pkg		*pkg_new_empty(const char *);
-struct pkg		*pkg_new_freebsd_from_file(FILE *);
-struct pkg		*pkg_new_freebsd_installed(const char *, const char *);
-struct pkg		*pkg_new_freebsd_empty(const char *);
-struct pkg		*pkg_make_freebsd(struct pkg *, FILE *);
-int			 pkg_add_file(struct pkg *, struct pkg_file *);
+struct pkg		 *pkg_new_empty(const char *);
+struct pkg		 *pkg_new_freebsd_from_file(FILE *);
+struct pkg		 *pkg_new_freebsd_installed(const char *, const char *);
+struct pkg		 *pkg_new_freebsd_empty(const char *);
+struct pkg		 *pkg_make_freebsd(struct pkg *, FILE *);
+int			  pkg_add_dependency(struct pkg *, struct pkg *);
+int			  pkg_add_file(struct pkg *, struct pkg_file *);
 struct pkg		**pkg_get_dependencies(struct pkg *);
 /*
  * Returns all control files from the package
@@ -64,9 +65,9 @@
  */
 struct pkg_file		**pkg_get_control_files(struct pkg *);
 /* Returns the next non-control file */
-struct pkg_file		*pkg_get_next_file(struct pkg *);
-int			 pkg_free(struct pkg *);
+struct pkg_file		 *pkg_get_next_file(struct pkg *);
+int			  pkg_free(struct pkg *);
 
-char			*pkg_get_name(struct pkg *);
+char			 *pkg_get_name(struct pkg *);
 
 #endif /* __LIBPKG_PKG_H__ */

Modified: trunk/src/pkg_freebsd.c
===================================================================
--- trunk/src/pkg_freebsd.c	2005-12-13 08:48:27 UTC (rev 31)
+++ trunk/src/pkg_freebsd.c	2005-12-14 02:42:16 UTC (rev 32)
@@ -59,7 +59,10 @@
 };
 
 /* Callbacks */
-static int			  freebsd_add_file(struct pkg *, struct pkg_file *);
+static int			  freebsd_add_depend(struct pkg *,
+					struct pkg *);
+static int			  freebsd_add_file(struct pkg *,
+					struct pkg_file *);
 static struct pkg_file		**freebsd_get_control_files(struct pkg *);
 static struct pkg_file		 *freebsd_get_next_file(struct pkg *);
 static struct pkg		**freebsd_get_deps(struct pkg *);
@@ -87,7 +90,7 @@
 	/* Find the package name */
 	pkg_name = freebsd_get_pkg_name(f_pkg->control[0]->contents);
 
-	pkg = pkg_new(pkg_name, NULL, freebsd_get_control_files,
+	pkg = pkg_new(pkg_name, NULL, NULL, freebsd_get_control_files,
 		freebsd_get_next_file, freebsd_get_deps, freebsd_free);
 	free(pkg_name);
 
@@ -160,7 +163,7 @@
 	closedir(d);
 	
 	/* Only the get_deps and free callbacks will work */
-	pkg = pkg_new(pkg_name, NULL, NULL, NULL,
+	pkg = pkg_new(pkg_name, NULL, NULL, NULL, NULL,
 	    freebsd_get_deps, freebsd_free);
 	if (pkg == NULL) {
 		FREE_CONTENTS(control);
@@ -187,7 +190,8 @@
 	if (pkg_name == NULL)
 		return NULL;
 
-	pkg = pkg_new(pkg_name, freebsd_add_file, NULL, NULL, NULL, freebsd_free);
+	pkg = pkg_new(pkg_name, freebsd_add_depend, freebsd_add_file, NULL,
+	    NULL, NULL, freebsd_free);
 	if (pkg == NULL)
 		return NULL;
 
@@ -219,7 +223,7 @@
 {
 	struct freebsd_package *f_pkg;
 
-	pkg_set_callbacks(pkg, NULL, freebsd_get_control_files,
+	pkg_set_callbacks(pkg, NULL, NULL, freebsd_get_control_files,
 	    freebsd_get_next_file, freebsd_get_deps, freebsd_free);
 	f_pkg = freebsd_get_package(fd, NULL);
 	pkg->data = f_pkg;
@@ -339,6 +343,12 @@
 }
 
 static int
+freebsd_add_depend(struct pkg *pkg __unused, struct pkg *depend __unused)
+{
+	return -1;
+}
+
+static int
 freebsd_add_file(struct pkg *pkg, struct pkg_file *file)
 {
 	struct freebsd_package *f_pkg;
@@ -357,7 +367,6 @@
 	f_pkg->all_files_pos++;
 	f_pkg->all_files[f_pkg->all_files_pos] = NULL;
 
-	/* XXX Add the file to the +CONTENTS file */
 	assert(f_pkg->contents != NULL);
 	pkg_freebsd_contents_add_file(f_pkg->contents, file);
 	

Modified: trunk/src/pkg_private.h
===================================================================
--- trunk/src/pkg_private.h	2005-12-13 08:48:27 UTC (rev 31)
+++ trunk/src/pkg_private.h	2005-12-14 02:42:16 UTC (rev 32)
@@ -45,16 +45,20 @@
 typedef struct pkg	**pkg_get_dependencies_callback(struct pkg *);
 typedef struct pkg_file	**pkg_get_control_files_callback(struct pkg *);
 typedef struct pkg_file	*pkg_get_next_file_callback(struct pkg *);
+typedef int		 pkg_add_dependency_callback(struct pkg *,
+				struct pkg *);
 typedef int		 pkg_add_file_callback(struct pkg *, struct pkg_file *);
 typedef int		 pkg_free_callback(struct pkg *);
 
 struct pkg		*pkg_new(const char *,
+				pkg_add_dependency_callback *,
 				pkg_add_file_callback *,
 				pkg_get_control_files_callback *,
 				pkg_get_next_file_callback *,
 				pkg_get_dependencies_callback *,
 				pkg_free_callback *);
 struct pkg		*pkg_set_callbacks(struct pkg *pkg,
+				pkg_add_dependency_callback *,
 				pkg_add_file_callback *,
 				pkg_get_control_files_callback *,
 				pkg_get_next_file_callback *,
@@ -65,6 +69,7 @@
 	void	*data;
 
 	char	*pkg_name;
+	pkg_add_dependency_callback	*pkg_add_depend;
 	pkg_add_file_callback		*pkg_add_file;
 	pkg_get_control_files_callback	*pkg_get_control_files;
 	pkg_get_next_file_callback	*pkg_get_next_file;



From zxombie at berlios.de  Thu Dec 15 13:09:27 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Thu, 15 Dec 2005 13:09:27 +0100
Subject: [Libpkg-svn] r37 - trunk/src
Message-ID: <200512151209.jBFC9RqP000028@sheep.berlios.de>

Author: zxombie
Date: 2005-12-15 13:09:26 +0100 (Thu, 15 Dec 2005)
New Revision: 37

Modified:
   trunk/src/pkg_file.c
Log:
Speed up pkg_file_new a little by using the size from struct stat


Modified: trunk/src/pkg_file.c
===================================================================
--- trunk/src/pkg_file.c	2005-12-15 10:31:36 UTC (rev 36)
+++ trunk/src/pkg_file.c	2005-12-15 12:09:26 UTC (rev 37)
@@ -57,12 +57,8 @@
 		return NULL;
 	}
 	fstat(fileno(fd), &sb);
+	length = sb.st_size;
 
-	/* Get the file length */
-	fseek(fd, 0, SEEK_END);
-	length = ftell(fd);
-	fseek(fd, 0, SEEK_SET);
-
 	buffer = malloc(length + 1);
 	if (buffer == NULL) {
 		fclose(fd);



From zxombie at berlios.de  Thu Dec 15 13:47:38 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Thu, 15 Dec 2005 13:47:38 +0100
Subject: [Libpkg-svn] r38 - trunk/src
Message-ID: <200512151247.jBFClcJQ012935@sheep.berlios.de>

Author: zxombie
Date: 2005-12-15 13:47:35 +0100 (Thu, 15 Dec 2005)
New Revision: 38

Modified:
   trunk/src/Makefile
   trunk/src/pkg.c
Log:
Add a function to pass to qsort to sort a list of packages by pkg_name


Modified: trunk/src/Makefile
===================================================================
--- trunk/src/Makefile	2005-12-15 12:09:26 UTC (rev 37)
+++ trunk/src/Makefile	2005-12-15 12:47:35 UTC (rev 38)
@@ -26,7 +26,7 @@
 
 CFLAGS+=-O0
 DEBUG_FLAGS=-ggdb
-WARNS?=6
+WARNS?=3
 NOPROFILE=1
 
 .include <bsd.lib.mk>

Modified: trunk/src/pkg.c
===================================================================
--- trunk/src/pkg.c	2005-12-15 12:09:26 UTC (rev 37)
+++ trunk/src/pkg.c	2005-12-15 12:47:35 UTC (rev 38)
@@ -91,7 +91,18 @@
 	return pkg;
 }
 
+/*
+ * A function to pass to *sort[_r] to sort alphabeticly by package name
+ */
 int
+pkg_compare(const void *a, const void *b)
+{
+	/* XXX Makes WARNS <= 3 */
+	return strcmp((*(const struct pkg **)a)->pkg_name,
+	    (*(const struct pkg **)b)->pkg_name);
+}
+
+int
 pkg_add_dependency(struct pkg *pkg, struct pkg *depend)
 {
 	if (!pkg || !depend)



From zxombie at berlios.de  Thu Dec 15 13:49:45 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Thu, 15 Dec 2005 13:49:45 +0100
Subject: [Libpkg-svn] r39 - trunk/src
Message-ID: <200512151249.jBFCnjaI014394@sheep.berlios.de>

Author: zxombie
Date: 2005-12-15 13:49:38 +0100 (Thu, 15 Dec 2005)
New Revision: 39

Modified:
   trunk/src/pkg.h
   trunk/src/pkg_db_freebsd.c
   trunk/src/pkg_file.c
   trunk/src/pkg_freebsd.c
   trunk/src/pkg_freebsd_contents.c
   trunk/src/pkg_private.h
   trunk/src/pkg_util.c
Log:
Make pkg_file read the file only when it needs to


Modified: trunk/src/pkg.h
===================================================================
--- trunk/src/pkg.h	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg.h	2005-12-15 12:49:38 UTC (rev 39)
@@ -45,6 +45,7 @@
 			const struct stat *);
 int		 pkg_file_free(struct pkg_file *);
 int		 pkg_file_write(struct pkg_file *);
+char		*pkg_file_get(struct pkg_file *);
 
 /*
  * The package handling functions
@@ -55,6 +56,7 @@
 struct pkg		 *pkg_new_freebsd_from_file(FILE *);
 struct pkg		 *pkg_new_freebsd_installed(const char *, const char *);
 struct pkg		 *pkg_new_freebsd_empty(const char *);
+int			  pkg_compare(const void *, const void *);
 int			  pkg_add_dependency(struct pkg *, struct pkg *);
 int			  pkg_add_file(struct pkg *, struct pkg_file *);
 struct pkg		**pkg_get_dependencies(struct pkg *);

Modified: trunk/src/pkg_db_freebsd.c
===================================================================
--- trunk/src/pkg_db_freebsd.c	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg_db_freebsd.c	2005-12-15 12:49:38 UTC (rev 39)
@@ -111,7 +111,7 @@
 		return -1;
 	}
 
-	contents = pkg_freebsd_contents_new(contents_file->contents);
+	contents = pkg_freebsd_contents_new(pkg_file_get(contents_file));
 	if (!contents) {
 		return -1;
 	}

Modified: trunk/src/pkg_file.c
===================================================================
--- trunk/src/pkg_file.c	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg_file.c	2005-12-15 12:49:38 UTC (rev 39)
@@ -46,7 +46,6 @@
 	struct pkg_file *file;
 	FILE *fd;
 	struct stat sb;
-	char *buffer;
 	uint64_t length;
 
 	if (!filename)
@@ -59,27 +58,12 @@
 	fstat(fileno(fd), &sb);
 	length = sb.st_size;
 
-	buffer = malloc(length + 1);
-	if (buffer == NULL) {
+	file = pkg_file_new_from_buffer(filename, length, NULL, &sb);
+	if (!file) {
 		fclose(fd);
 		return NULL;
 	}
-
-	/* 
-	 * XXX fread can only handle up to SIZE_T_MAX so fail
-	 * if the file is bigger until a better file reader
-	 */
-	assert(length <= SIZE_T_MAX);
-	fread(buffer, 1, length, fd);
-	buffer[length] = '\0';
-	
-	fclose(fd);
-
-	file = pkg_file_new_from_buffer(filename, length, buffer, &sb);
-	if (!file) {
-		free(buffer);
-		return NULL;
-	}
+	file->fd = fd;
 	return file;
 }
 
@@ -92,7 +76,7 @@
 {
 	struct pkg_file *file;
 
-	if (!filename || !buffer)
+	if (!filename)
 		return NULL;
 	
 	file = malloc(sizeof(struct pkg_file));
@@ -118,6 +102,7 @@
 	}
 	file->len = length;
 	file->contents = buffer;
+	file->fd = NULL;
 
 	return file;
 }
@@ -141,6 +126,9 @@
 	if (file->stat)
 		free(file->stat);
 
+	if (file->fd)
+		fclose(file->fd);
+
 	free(file);
 
 	return 0;
@@ -204,3 +192,27 @@
 
 	return 0;
 }
+
+char *
+pkg_file_get(struct pkg_file *file)
+{
+	if (!file || !file->fd)
+		return NULL;
+
+	if (file->contents == NULL) {
+		file->contents = malloc(file->len + 1);
+		if (file->contents == NULL) {
+			return NULL;
+		}
+
+		/* 
+		 * XXX fread can only handle up to SIZE_T_MAX so fail
+		 * if the file is bigger until a better file reader
+		 */
+		assert(file->len <= SIZE_T_MAX);
+		fread(file->contents, 1, file->len, file->fd);
+		file->contents[file->len] = '\0';
+	}
+	
+	return file->contents;
+}

Modified: trunk/src/pkg_freebsd.c
===================================================================
--- trunk/src/pkg_freebsd.c	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg_freebsd.c	2005-12-15 12:49:38 UTC (rev 39)
@@ -89,7 +89,7 @@
 	f_pkg = freebsd_get_package(fd, NULL);
 
 	/* Find the package name */
-	pkg_name = freebsd_get_pkg_name(f_pkg->control[0]->contents);
+	pkg_name = freebsd_get_pkg_name(pkg_file_get(f_pkg->control[0]));
 
 	pkg = pkg_new(pkg_name, NULL, NULL, freebsd_get_control_files,
 		freebsd_get_next_file, freebsd_get_deps, freebsd_free);
@@ -126,6 +126,12 @@
 	if (!pkg_name || ! pkg_db_dir)
 		return NULL;
 
+	control = NULL;
+
+	/*
+	 * This section until the closedir takes too long in pkg_info.
+	 * It needs to be optimised to just read the required data
+	 */
 	d = opendir(pkg_db_dir);
 
 	/* Load all the + files into control */
@@ -163,7 +169,7 @@
 	}
 
 	closedir(d);
-	
+
 	/* Only the get_deps and free callbacks will work */
 	pkg = pkg_new(pkg_name, NULL, NULL, NULL, NULL,
 	    freebsd_get_deps, freebsd_free);
@@ -301,7 +307,7 @@
 		}
 
 		f_pkg->contents = pkg_freebsd_contents_new(
-		    control[pos]->contents);
+		    pkg_file_get(control[pos]));
 	} else if (fd != NULL) {
 		/*
 		 * We only need to read from gzip and bzip2 as they
@@ -338,7 +344,7 @@
 		 * Set the control files array to be big enough for
 		 * the +CONTENTS file and a null terminator
 		 */
-		f_pkg->contents = pkg_freebsd_contents_new(file->contents);
+		f_pkg->contents = pkg_freebsd_contents_new(pkg_file_get(file));
 
 		control_size = sizeof(struct pkg_file *) * 2;
 		f_pkg->control = malloc(control_size);

Modified: trunk/src/pkg_freebsd_contents.c
===================================================================
--- trunk/src/pkg_freebsd_contents.c	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg_freebsd_contents.c	2005-12-15 12:49:38 UTC (rev 39)
@@ -264,7 +264,7 @@
 		return -1;
 	}
 
-	MD5Data(file->contents, file->len, md5);
+	MD5Data(pkg_file_get(file), file->len, md5);
 	snprintf(tmp, 37, "MD5:%s", md5);
 	if (pkg_freebsd_contents_add_line(contents, PKG_LINE_COMMENT, tmp)
 	    != 0) {

Modified: trunk/src/pkg_private.h
===================================================================
--- trunk/src/pkg_private.h	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg_private.h	2005-12-15 12:49:38 UTC (rev 39)
@@ -39,6 +39,7 @@
 	uint64_t	 len;
 	char		*contents;
 	struct stat	*stat;
+	FILE		*fd;
 };
 
 /* Package Object */

Modified: trunk/src/pkg_util.c
===================================================================
--- trunk/src/pkg_util.c	2005-12-15 12:47:35 UTC (rev 38)
+++ trunk/src/pkg_util.c	2005-12-15 12:49:38 UTC (rev 39)
@@ -109,7 +109,7 @@
 	}
 
 	/* Perform a checksum on the file to install */
-	MD5Data(file->contents, file->len, sum);
+	MD5Data(pkg_file_get(file), file->len, sum);
 	if (strcmp(sum, chk_sum)) {
 		return -1;
 	}



From zxombie at berlios.de  Thu Dec 15 14:04:50 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Thu, 15 Dec 2005 14:04:50 +0100
Subject: [Libpkg-svn] r40 - trunk/src
Message-ID: <200512151304.jBFD4ouS019615@sheep.berlios.de>

Author: zxombie
Date: 2005-12-15 14:04:46 +0100 (Thu, 15 Dec 2005)
New Revision: 40

Modified:
   trunk/src/pkg_file.c
   trunk/src/pkg_freebsd_contents.c
Log:
Fix pkg_file_get when there is a buffer but not a fd


Modified: trunk/src/pkg_file.c
===================================================================
--- trunk/src/pkg_file.c	2005-12-15 12:49:38 UTC (rev 39)
+++ trunk/src/pkg_file.c	2005-12-15 13:04:46 UTC (rev 40)
@@ -196,7 +196,7 @@
 char *
 pkg_file_get(struct pkg_file *file)
 {
-	if (!file || !file->fd)
+	if (file == NULL || (file->contents == NULL && file->fd == NULL))
 		return NULL;
 
 	if (file->contents == NULL) {
@@ -213,6 +213,6 @@
 		fread(file->contents, 1, file->len, file->fd);
 		file->contents[file->len] = '\0';
 	}
-	
+
 	return file->contents;
 }

Modified: trunk/src/pkg_freebsd_contents.c
===================================================================
--- trunk/src/pkg_freebsd_contents.c	2005-12-15 12:49:38 UTC (rev 39)
+++ trunk/src/pkg_freebsd_contents.c	2005-12-15 13:04:46 UTC (rev 40)
@@ -255,6 +255,7 @@
 		struct pkg_file *file)
 {
 	char md5[33], tmp[37];
+	char *data;
 
 	if (contents == NULL || contents->file != NULL || file == NULL)
 		return -1;
@@ -264,7 +265,10 @@
 		return -1;
 	}
 
-	MD5Data(pkg_file_get(file), file->len, md5);
+	data = pkg_file_get(file);
+	if (!data)
+		return -1;
+	MD5Data(data, file->len, md5);
 	snprintf(tmp, 37, "MD5:%s", md5);
 	if (pkg_freebsd_contents_add_line(contents, PKG_LINE_COMMENT, tmp)
 	    != 0) {



From zxombie at berlios.de  Fri Dec 16 03:14:16 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Fri, 16 Dec 2005 03:14:16 +0100
Subject: [Libpkg-svn] r41 - trunk/src
Message-ID: <200512160214.jBG2EG89017898@sheep.berlios.de>

Author: zxombie
Date: 2005-12-16 03:14:06 +0100 (Fri, 16 Dec 2005)
New Revision: 41

Modified:
   trunk/src/Makefile
   trunk/src/pkg.c
   trunk/src/pkg.h
   trunk/src/pkg_freebsd.c
   trunk/src/pkg_private.h
Log:
Ad pkg_get_control_file to retrieve a single named control file
Build a profiling library


Modified: trunk/src/Makefile
===================================================================
--- trunk/src/Makefile	2005-12-15 13:04:46 UTC (rev 40)
+++ trunk/src/Makefile	2005-12-16 02:14:06 UTC (rev 41)
@@ -27,6 +27,5 @@
 CFLAGS+=-O0
 DEBUG_FLAGS=-ggdb
 WARNS?=3
-NOPROFILE=1
 
 .include <bsd.lib.mk>

Modified: trunk/src/pkg.c
===================================================================
--- trunk/src/pkg.c	2005-12-15 13:04:46 UTC (rev 40)
+++ trunk/src/pkg.c	2005-12-16 02:14:06 UTC (rev 41)
@@ -38,6 +38,7 @@
 		pkg_add_dependency_callback *add_depend,
 		pkg_add_file_callback *add_file,
 		pkg_get_control_files_callback *control_files,
+		pkg_get_control_file_callback *control_file,
 		pkg_get_next_file_callback *next_file,
 		pkg_get_dependencies_callback *get_deps,
 		pkg_free_callback *free_pkg)
@@ -58,8 +59,8 @@
 		return NULL;
 	}
 
-	pkg_set_callbacks(pkg, add_depend, add_file, control_files, next_file,
-	    get_deps, free_pkg);
+	pkg_set_callbacks(pkg, add_depend, add_file, control_files,
+	    control_file, next_file, get_deps, free_pkg);
 
 	pkg->data = NULL;
 
@@ -69,7 +70,7 @@
 struct pkg*
 pkg_new_empty(const char *name)
 {
-	return pkg_new(name, NULL, NULL, NULL, NULL, NULL, NULL);
+	return pkg_new(name, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
 }
 
 struct pkg *
@@ -77,6 +78,7 @@
 		pkg_add_dependency_callback *add_depend,
 		pkg_add_file_callback *add_file,
 		pkg_get_control_files_callback *control_files,
+		pkg_get_control_file_callback *control_file,
 		pkg_get_next_file_callback *next_file,
 		pkg_get_dependencies_callback *get_deps,
 		pkg_free_callback *free_pkg)
@@ -84,6 +86,7 @@
 	pkg->pkg_add_depend = add_depend;
 	pkg->pkg_add_file = add_file;
 	pkg->pkg_get_control_files = control_files;
+	pkg->pkg_get_control_file = control_file;
 	pkg->pkg_get_next_file = next_file;
 	pkg->pkg_get_deps = get_deps;
 	pkg->pkg_free = free_pkg;
@@ -141,6 +144,18 @@
 }
 
 struct pkg_file *
+pkg_get_control_file(struct pkg *pkg, const char *name)
+{
+	if (!pkg || !name)
+		return NULL;
+
+	if (pkg->pkg_get_control_file)
+		return pkg->pkg_get_control_file(pkg, name);
+
+	return NULL;
+}
+
+struct pkg_file *
 pkg_get_next_file(struct pkg *pkg)
 {
 	if (!pkg) {

Modified: trunk/src/pkg.h
===================================================================
--- trunk/src/pkg.h	2005-12-15 13:04:46 UTC (rev 40)
+++ trunk/src/pkg.h	2005-12-16 02:14:06 UTC (rev 41)
@@ -65,6 +65,7 @@
  * Eg. +CONTENTS from FreeBSD Packages
  */
 struct pkg_file		**pkg_get_control_files(struct pkg *);
+struct pkg_file		 *pkg_get_control_file(struct pkg *, const char *);
 /* Returns the next non-control file */
 struct pkg_file		 *pkg_get_next_file(struct pkg *);
 int			  pkg_list_free(struct pkg **);

Modified: trunk/src/pkg_freebsd.c
===================================================================
--- trunk/src/pkg_freebsd.c	2005-12-15 13:04:46 UTC (rev 40)
+++ trunk/src/pkg_freebsd.c	2005-12-16 02:14:06 UTC (rev 41)
@@ -65,6 +65,8 @@
 static int			  freebsd_add_file(struct pkg *,
 					struct pkg_file *);
 static struct pkg_file		**freebsd_get_control_files(struct pkg *);
+static struct pkg_file		 *freebsd_get_control_file(struct pkg *,
+					const char *);
 static struct pkg_file		 *freebsd_get_next_file(struct pkg *);
 static struct pkg		**freebsd_get_deps(struct pkg *);
 static int			  freebsd_free(struct pkg *);
@@ -92,7 +94,8 @@
 	pkg_name = freebsd_get_pkg_name(pkg_file_get(f_pkg->control[0]));
 
 	pkg = pkg_new(pkg_name, NULL, NULL, freebsd_get_control_files,
-		freebsd_get_next_file, freebsd_get_deps, freebsd_free);
+	    freebsd_get_control_file, freebsd_get_next_file,
+	    freebsd_get_deps, freebsd_free);
 	free(pkg_name);
 
 	if (pkg == NULL)
@@ -171,8 +174,8 @@
 	closedir(d);
 
 	/* Only the get_deps and free callbacks will work */
-	pkg = pkg_new(pkg_name, NULL, NULL, NULL, NULL,
-	    freebsd_get_deps, freebsd_free);
+	pkg = pkg_new(pkg_name, NULL, NULL, freebsd_get_control_files,
+	    freebsd_get_control_file, NULL, freebsd_get_deps, freebsd_free);
 	if (pkg == NULL) {
 		FREE_CONTENTS(control);
 		return NULL;
@@ -211,7 +214,7 @@
 		return NULL;
 
 	pkg = pkg_new(pkg_name, freebsd_add_depend, freebsd_add_file, NULL,
-	    NULL, NULL, freebsd_free);
+	    NULL, NULL, NULL, freebsd_free);
 	if (pkg == NULL)
 		return NULL;
 
@@ -244,7 +247,8 @@
 	struct freebsd_package *f_pkg;
 
 	pkg_set_callbacks(pkg, NULL, NULL, freebsd_get_control_files,
-	    freebsd_get_next_file, freebsd_get_deps, freebsd_free);
+	    freebsd_get_control_file, freebsd_get_next_file,
+	    freebsd_get_deps, freebsd_free);
 	f_pkg = freebsd_get_package(fd, NULL);
 	pkg->data = f_pkg;
 
@@ -421,6 +425,25 @@
 	return f_pkg->control;
 }
 
+static struct pkg_file *
+freebsd_get_control_file(struct pkg *pkg, const char *file)
+{
+	struct freebsd_package *f_pkg;
+	unsigned int pos;
+
+	assert(pkg != NULL);
+	assert(file != NULL);
+
+	f_pkg = pkg->data;
+	assert(f_pkg != NULL);
+
+	for (pos = 0; f_pkg->control[pos] != NULL; pos++)
+		if (strcmp(basename(f_pkg->control[pos]->filename), file) == 0)
+			return f_pkg->control[pos];
+
+	return NULL;
+}
+
 /* Get the next file in the package */
 static struct pkg_file *
 freebsd_get_next_file(struct pkg *pkg)

Modified: trunk/src/pkg_private.h
===================================================================
--- trunk/src/pkg_private.h	2005-12-15 13:04:46 UTC (rev 40)
+++ trunk/src/pkg_private.h	2005-12-16 02:14:06 UTC (rev 41)
@@ -45,8 +45,10 @@
 /* Package Object */
 typedef struct pkg	**pkg_get_dependencies_callback(struct pkg *);
 typedef struct pkg_file	**pkg_get_control_files_callback(struct pkg *);
-typedef struct pkg_file	*pkg_get_next_file_callback(struct pkg *);
-typedef int		 pkg_add_dependency_callback(struct pkg *,
+typedef struct pkg_file  *pkg_get_control_file_callback(struct pkg *,
+				const char *);
+typedef struct pkg_file	 *pkg_get_next_file_callback(struct pkg *);
+typedef int		  pkg_add_dependency_callback(struct pkg *,
 				struct pkg *);
 typedef int		 pkg_add_file_callback(struct pkg *, struct pkg_file *);
 typedef int		 pkg_free_callback(struct pkg *);
@@ -55,6 +57,7 @@
 				pkg_add_dependency_callback *,
 				pkg_add_file_callback *,
 				pkg_get_control_files_callback *,
+				pkg_get_control_file_callback *,
 				pkg_get_next_file_callback *,
 				pkg_get_dependencies_callback *,
 				pkg_free_callback *);
@@ -62,6 +65,7 @@
 				pkg_add_dependency_callback *,
 				pkg_add_file_callback *,
 				pkg_get_control_files_callback *,
+				pkg_get_control_file_callback *,
 				pkg_get_next_file_callback *,
 				pkg_get_dependencies_callback *,
 				pkg_free_callback *);
@@ -73,6 +77,7 @@
 	pkg_add_dependency_callback	*pkg_add_depend;
 	pkg_add_file_callback		*pkg_add_file;
 	pkg_get_control_files_callback	*pkg_get_control_files;
+	pkg_get_control_file_callback	*pkg_get_control_file;
 	pkg_get_next_file_callback	*pkg_get_next_file;
 	pkg_free_callback		*pkg_free;
 	pkg_get_dependencies_callback	*pkg_get_deps;



From zxombie at berlios.de  Tue Dec 20 23:37:27 2005
From: zxombie at berlios.de (zxombie at BerliOS)
Date: Tue, 20 Dec 2005 23:37:27 +0100
Subject: [Libpkg-svn] r42 - trunk/src
Message-ID: <200512202237.jBKMbRYh014424@sheep.berlios.de>

Author: zxombie
Date: 2005-12-20 23:37:26 +0100 (Tue, 20 Dec 2005)
New Revision: 42

Modified:
   trunk/src/pkg_db.c
   trunk/src/pkg_db.h
   trunk/src/pkg_db_freebsd.c
   trunk/src/pkg_db_private.h
   trunk/src/pkg_freebsd.c
Log:
Add pkg_db_get_package to get a named package from a Database
Check the return value of opendir to stop a seg fault
Improve the style


Modified: trunk/src/pkg_db.c
===================================================================
--- trunk/src/pkg_db.c	2005-12-16 02:14:06 UTC (rev 41)
+++ trunk/src/pkg_db.c	2005-12-20 22:37:26 UTC (rev 42)
@@ -41,7 +41,8 @@
 struct pkg_db*
 pkg_db_open(const char *base, pkg_db_install_pkg_callback *install_pkg,
 		pkg_db_is_installed_callback *is_installed,
-		pkg_db_get_installed_callback *get_installed)
+		pkg_db_get_installed_callback *get_installed,
+		pkg_db_get_package_callback *get_package)
 {
 	struct pkg_db *db;
 	struct stat sb;
@@ -80,6 +81,7 @@
 	db->pkg_install = install_pkg;
 	db->pkg_is_installed = is_installed;
 	db->pkg_get_installed = get_installed;
+	db->pkg_get_package = get_package;
 
 	db->data = NULL;
 
@@ -130,6 +132,18 @@
 	return db->pkg_get_installed(db);
 }
 
+struct pkg *
+pkg_db_get_package(struct pkg_db *db, const char *name)
+{
+	if (!db || !name)
+		return NULL;
+
+	if (db->pkg_get_package)
+		return db->pkg_get_package(db, name);
+
+	return NULL;
+}
+
 int
 pkg_db_free(struct pkg_db *db)
 {

Modified: trunk/src/pkg_db.h
===================================================================
--- trunk/src/pkg_db.h	2005-12-16 02:14:06 UTC (rev 41)
+++ trunk/src/pkg_db.h	2005-12-20 22:37:26 UTC (rev 42)
@@ -35,10 +35,11 @@
  */
 struct pkg_db;
 
-struct pkg_db	*pkg_db_open_freebsd(const char *);
-int		 pkg_db_install_pkg(struct pkg_db *, struct pkg *);
-int		 pkg_db_is_installed(struct pkg_db *, const char *);
+struct pkg_db	 *pkg_db_open_freebsd(const char *);
+int		  pkg_db_install_pkg(struct pkg_db *, struct pkg *);
+int		  pkg_db_is_installed(struct pkg_db *, const char *);
 struct pkg	**pkg_db_get_installed(struct pkg_db *);
-int		 pkg_db_free(struct pkg_db *);
+struct pkg	 *pkg_db_get_package(struct pkg_db *, const char *);
+int		  pkg_db_free(struct pkg_db *);
 
 #endif /* __LIBPKG_PKG_DB_H__ */

Modified: trunk/src/pkg_db_freebsd.c
===================================================================
--- trunk/src/pkg_db_freebsd.c	2005-12-16 02:14:06 UTC (rev 41)
+++ trunk/src/pkg_db_freebsd.c	2005-12-20 22:37:26 UTC (rev 42)
@@ -27,6 +27,7 @@
  *
  */
 
+#include <sys/param.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 
@@ -61,15 +62,17 @@
 	{ -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1 }  /* p6 */
 };
 
-static int freebsd_install_pkg(struct pkg_db *, struct pkg *);
-static int freebsd_is_installed(struct pkg_db *, const char *);
-static struct pkg **freebsd_get_installed(struct pkg_db *);
-	
+static int		  freebsd_install_pkg(struct pkg_db *, struct pkg *);
+static int		  freebsd_is_installed(struct pkg_db *, const char *);
+static struct pkg	**freebsd_get_installed(struct pkg_db *);
+static struct pkg	 *freebsd_get_package(struct pkg_db *, const char *);	
 
-/* Calbacks */
-static struct pkg_file *freebsd_build_contents(struct pkg_freebsd_contents *);
-static int freebsd_do_cwd(struct pkg_db *, struct pkg *, char *ndir);
-static int freebsd_check_contents(struct pkg_db *, struct pkg_freebsd_contents *);
+/* Internal */
+static struct pkg_file	*freebsd_build_contents(struct pkg_freebsd_contents *);
+static int		 freebsd_do_cwd(struct pkg_db *, struct pkg *,
+				char *ndir);
+static int		 freebsd_check_contents(struct pkg_db *,
+				struct pkg_freebsd_contents *);
 
 /*
  * Opens the FreeBSD Package Database
@@ -78,7 +81,7 @@
 pkg_db_open_freebsd(const char *base)
 {
 	return pkg_db_open(base, freebsd_install_pkg, freebsd_is_installed,
-	    freebsd_get_installed);
+	    freebsd_get_installed, freebsd_get_package);
 }
 
 /*
@@ -189,15 +192,17 @@
 
 			/* Read the file to install */
 			if (contents->lines[line].line[0] == '+') {
-				/* + Files are not fetched with pkg_get_next_file */
-				        for (pos = 0; control[pos] != NULL;
-					    pos++) {
-						if (!strcmp(
-						    control[pos]->filename,
-						    contents->lines[line].line))
-							break;
-					}
-					file = control[pos];
+				/*
+				 * + Files are not fetched with
+				 * pkg_get_next_file
+				 */
+				for (pos = 0; control[pos] != NULL;
+				    pos++) {
+					if (!strcmp(control[pos]->filename,
+					    contents->lines[line].line))
+						break;
+				}
+				file = control[pos];
 			} else {
 				file = pkg_get_next_file(pkg);
 
@@ -355,6 +360,15 @@
 	return packages;
 }
 
+static struct pkg *
+freebsd_get_package(struct pkg_db *db, const char *pkg_name)
+{
+	char dir[MAXPATHLEN + 1];
+
+	snprintf(dir, MAXPATHLEN, "%s/var/db/pkg/%s", db->db_base, pkg_name);
+	return pkg_new_freebsd_installed(pkg_name, dir);
+}
+
 static int
 freebsd_do_cwd(struct pkg_db *db, struct pkg *pkg, char *ndir) {
 	char *dir;

Modified: trunk/src/pkg_db_private.h
===================================================================
--- trunk/src/pkg_db_private.h	2005-12-16 02:14:06 UTC (rev 41)
+++ trunk/src/pkg_db_private.h	2005-12-20 22:37:26 UTC (rev 42)
@@ -32,12 +32,15 @@
 
 typedef int	 pkg_db_install_pkg_callback(struct pkg_db *, struct pkg *);
 typedef int 	 pkg_db_is_installed_callback(struct pkg_db *, const char *);
-typedef struct pkg **pkg_db_get_installed_callback(struct pkg_db *);
+typedef struct pkg	 *pkg_db_get_package_callback(struct pkg_db *,
+				const char *);
+typedef struct pkg	**pkg_db_get_installed_callback(struct pkg_db *);
 
 
 struct pkg_db	*pkg_db_open(const char *, pkg_db_install_pkg_callback *,
 			pkg_db_is_installed_callback *,
-			pkg_db_get_installed_callback *);
+			pkg_db_get_installed_callback *,
+			pkg_db_get_package_callback *);
 struct pkg_db {
 	void	*data;
 
@@ -46,6 +49,7 @@
 	pkg_db_install_pkg_callback	*pkg_install;
 	pkg_db_is_installed_callback	*pkg_is_installed;
 	pkg_db_get_installed_callback	*pkg_get_installed;
+	pkg_db_get_package_callback	*pkg_get_package;
 };
 
 #endif /* __LIBPKG_PKG_DB_PRIVATE_H__ */

Modified: trunk/src/pkg_freebsd.c
===================================================================
--- trunk/src/pkg_freebsd.c	2005-12-16 02:14:06 UTC (rev 41)
+++ trunk/src/pkg_freebsd.c	2005-12-20 22:37:26 UTC (rev 42)
@@ -136,6 +136,8 @@
 	 * It needs to be optimised to just read the required data
 	 */
 	d = opendir(pkg_db_dir);
+	if (d == NULL)
+		return NULL;
 
 	/* Load all the + files into control */
 	control_size = sizeof(struct pkg_file **);



